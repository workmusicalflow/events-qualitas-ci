{# GSAP pour les animations #}
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>

{# Alpine.js pour la gestion d'Ã©tat #}
<script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>

<script>
    // Configuration des animations du carrousel
    document.addEventListener('alpine:init', () => {
        Alpine.data('carouselData', () => ({
            currentIndex: 0,
            isAnimating: false,
            autoplayInterval: null,
            images: [
                { src: '/images/banner/slider-pic-0.jpg', webp: '/images/banner/slider-pic-0.webp' },
                { src: '/images/banner/slider-pic-1.jpg', webp: '/images/banner/slider-pic-1.webp' },
                { src: '/images/banner/slider-pic-2.jpg', webp: '/images/banner/slider-pic-2.webp' },
                { src: '/images/banner/slider-pic-3.jpg', webp: '/images/banner/slider-pic-3.webp' },
                { src: '/images/banner/slider-pic-4.jpg', webp: '/images/banner/slider-pic-4.webp' }
            ],

            init() {
                this.preloadImages();
                this.startAutoplay();

                // Pause l'autoplay au survol
                this.$watch('$root.matches', value => {
                    if (value) this.stopAutoplay();
                    else this.startAutoplay();
                });
            },

            preloadImages() {
                this.images.forEach(image => {
                    const img = new Image();
                    img.src = image.src;
                    if (image.webp) {
                        const webp = new Image();
                        webp.src = image.webp;
                    }
                });
            },

            startAutoplay() {
                if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
                    this.autoplayInterval = setInterval(() => this.next(), 5000);
                }
            },

            stopAutoplay() {
                if (this.autoplayInterval) {
                    clearInterval(this.autoplayInterval);
                }
            },

            next() {
                if (this.isAnimating) return;
                this.isAnimating = true;
                
                const currentSlide = this.$refs.slide;
                const nextIndex = (this.currentIndex + 1) % this.images.length;

                gsap.timeline({
                    onComplete: () => {
                        this.currentIndex = nextIndex;
                        this.isAnimating = false;
                    }
                })
                .to(currentSlide, {
                    opacity: 0,
                    x: -50,
                    duration: 0.5,
                    ease: 'power2.inOut'
                })
                .set(currentSlide, { x: 50 })
                .to(currentSlide, {
                    opacity: 1,
                    x: 0,
                    duration: 0.5,
                    ease: 'power2.out'
                });
            },

            prev() {
                if (this.isAnimating) return;
                this.isAnimating = true;

                const currentSlide = this.$refs.slide;
                const prevIndex = (this.currentIndex - 1 + this.images.length) % this.images.length;

                gsap.timeline({
                    onComplete: () => {
                        this.currentIndex = prevIndex;
                        this.isAnimating = false;
                    }
                })
                .to(currentSlide, {
                    opacity: 0,
                    x: 50,
                    duration: 0.5,
                    ease: 'power2.inOut'
                })
                .set(currentSlide, { x: -50 })
                .to(currentSlide, {
                    opacity: 1,
                    x: 0,
                    duration: 0.5,
                    ease: 'power2.out'
                });
            },

            goTo(index) {
                if (this.isAnimating || index === this.currentIndex) return;
                
                const direction = index > this.currentIndex ? 1 : -1;
                this.isAnimating = true;

                const currentSlide = this.$refs.slide;
                gsap.timeline({
                    onComplete: () => {
                        this.currentIndex = index;
                        this.isAnimating = false;
                    }
                })
                .to(currentSlide, {
                    opacity: 0,
                    x: -50 * direction,
                    duration: 0.5,
                    ease: 'power2.inOut'
                })
                .set(currentSlide, { x: 50 * direction })
                .to(currentSlide, {
                    opacity: 1,
                    x: 0,
                    duration: 0.5,
                    ease: 'power2.out'
                });
            }
        }));
    });

    // Gestion du chargement progressif des images
    document.addEventListener('DOMContentLoaded', () => {
        const lazyImages = document.querySelectorAll('img[loading="lazy"]');
        
        if ('loading' in HTMLImageElement.prototype) {
            lazyImages.forEach(img => {
                img.src = img.dataset.src;
                if (img.dataset.srcset) {
                    img.srcset = img.dataset.srcset;
                }
            });
        } else {
            // Fallback pour les navigateurs qui ne supportent pas le lazy loading natif
            const lazyImageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src;
                        if (img.dataset.srcset) {
                            img.srcset = img.dataset.srcset;
                        }
                        img.classList.remove('lazy');
                        observer.unobserve(img);
                    }
                });
            });

            lazyImages.forEach(img => lazyImageObserver.observe(img));
        }
    });
</script>
